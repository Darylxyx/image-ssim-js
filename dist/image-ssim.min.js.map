{"version":3,"sources":["image-ssim.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","ImageSSIM","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"compare","image1","image2","windowSize","K1","K2","luminance","bitsPerComponent","iteration","lumaValues1","lumaValues2","averageLumaValue1","averageLumaValue2","sigxy","sigsqx","sigsqy","Math","pow","numPixelsInWin","numerator","c1","c2","denominator","mssim","mcs","numWindows","width","height","L","Internals","_iterate","ssim","Channels","callback","y","x","windowWidth","min","windowHeight","_lumaValuesForWindow","averageLuma1","_averageLuma","averageLuma2","image","array","data","lumaValues","Float32Array","ArrayBuffer","counter","maxj","j","offset","channels","maxi","sumLuma"],"mappings":"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","file":"image-ssim.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ImageSSIM = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @preserve\n * Copyright 2015 Igor Bezkrovny\n * All rights reserved. (MIT Licensed)\n *\n * ssim.ts - part of Image Quantization Library\n */\n/**\n * - Original TypeScript implementation:\n *   https://github.com/igor-bezkrovny/image-quantization/blob/9f62764ac047c3e53accdf1d7e4e424b0ef2fb60/src/quality/ssim.ts\n * - Based on Java implementation: https://github.com/rhys-e/structural-similarity\n * - For more information see: http://en.wikipedia.org/wiki/Structural_similarity\n */\nvar ImageSSIM;\n(function (ImageSSIM) {\n    'use strict';\n    /**\n     * Grey = 1, GreyAlpha = 2, RGB = 3, RGBAlpha = 4\n     */\n    (function (Channels) {\n        Channels[Channels[\"Grey\"] = 1] = \"Grey\";\n        Channels[Channels[\"GreyAlpha\"] = 2] = \"GreyAlpha\";\n        Channels[Channels[\"RGB\"] = 3] = \"RGB\";\n        Channels[Channels[\"RGBAlpha\"] = 4] = \"RGBAlpha\";\n    })(ImageSSIM.Channels || (ImageSSIM.Channels = {}));\n    var Channels = ImageSSIM.Channels;\n    /**\n     * Entry point.\n     * @throws new Error('Images have different sizes!')\n     */\n    function compare(image1, image2, windowSize, K1, K2, luminance, bitsPerComponent) {\n        if (windowSize === void 0) { windowSize = 8; }\n        if (K1 === void 0) { K1 = 0.01; }\n        if (K2 === void 0) { K2 = 0.03; }\n        if (luminance === void 0) { luminance = true; }\n        if (bitsPerComponent === void 0) { bitsPerComponent = 8; }\n        if (image1.width !== image2.width || image1.height !== image2.height) {\n            throw new Error('Images have different sizes!');\n        }\n        /* tslint:disable:no-bitwise */\n        var L = (1 << bitsPerComponent) - 1;\n        /* tslint:enable:no-bitwise */\n        var c1 = Math.pow((K1 * L), 2), c2 = Math.pow((K2 * L), 2), numWindows = 0, mssim = 0.0;\n        var mcs = 0.0;\n        function iteration(lumaValues1, lumaValues2, averageLumaValue1, averageLumaValue2) {\n            // calculate variance and covariance\n            var sigxy, sigsqx, sigsqy;\n            sigxy = sigsqx = sigsqy = 0.0;\n            for (var i = 0; i < lumaValues1.length; i++) {\n                sigsqx += Math.pow((lumaValues1[i] - averageLumaValue1), 2);\n                sigsqy += Math.pow((lumaValues2[i] - averageLumaValue2), 2);\n                sigxy += (lumaValues1[i] - averageLumaValue1) * (lumaValues2[i] - averageLumaValue2);\n            }\n            var numPixelsInWin = lumaValues1.length - 1;\n            sigsqx /= numPixelsInWin;\n            sigsqy /= numPixelsInWin;\n            sigxy /= numPixelsInWin;\n            // perform ssim calculation on window\n            var numerator = (2 * averageLumaValue1 * averageLumaValue2 + c1) * (2 * sigxy + c2);\n            var denominator = (Math.pow(averageLumaValue1, 2) + Math.pow(averageLumaValue2, 2) + c1) * (sigsqx + sigsqy + c2);\n            mssim += numerator / denominator;\n            mcs += (2 * sigxy + c2) / (sigsqx + sigsqy + c2);\n            numWindows++;\n        }\n        // calculate SSIM for each window\n        Internals._iterate(image1, image2, windowSize, luminance, iteration);\n        return { ssim: mssim / numWindows, mcs: mcs / numWindows };\n    }\n    ImageSSIM.compare = compare;\n    /**\n     * Internal functions.\n     */\n    var Internals;\n    (function (Internals) {\n        function _iterate(image1, image2, windowSize, luminance, callback) {\n            var width = image1.width, height = image1.height;\n            for (var y = 0; y < height; y += windowSize) {\n                for (var x = 0; x < width; x += windowSize) {\n                    // avoid out-of-width/height\n                    var windowWidth = Math.min(windowSize, width - x), windowHeight = Math.min(windowSize, height - y);\n                    var lumaValues1 = _lumaValuesForWindow(image1, x, y, windowWidth, windowHeight, luminance), lumaValues2 = _lumaValuesForWindow(image2, x, y, windowWidth, windowHeight, luminance), averageLuma1 = _averageLuma(lumaValues1), averageLuma2 = _averageLuma(lumaValues2);\n                    callback(lumaValues1, lumaValues2, averageLuma1, averageLuma2);\n                }\n            }\n        }\n        Internals._iterate = _iterate;\n        function _lumaValuesForWindow(image, x, y, width, height, luminance) {\n            var array = image.data, lumaValues = new Float32Array(new ArrayBuffer(width * height * 4)), counter = 0;\n            var maxj = y + height;\n            for (var j = y; j < maxj; j++) {\n                var offset = j * image.width;\n                var i = (offset + x) * image.channels;\n                var maxi = (offset + x + width) * image.channels;\n                switch (image.channels) {\n                    case 1 /* Grey */:\n                        while (i < maxi) {\n                            // (0.212655 +  0.715158 + 0.072187) === 1\n                            lumaValues[counter++] = array[i++];\n                        }\n                        break;\n                    case 2 /* GreyAlpha */:\n                        while (i < maxi) {\n                            lumaValues[counter++] = array[i++] * (array[i++] / 255);\n                        }\n                        break;\n                    case 3 /* RGB */:\n                        if (luminance) {\n                            while (i < maxi) {\n                                lumaValues[counter++] = (array[i++] * 0.212655 + array[i++] * 0.715158 + array[i++] * 0.072187);\n                            }\n                        }\n                        else {\n                            while (i < maxi) {\n                                lumaValues[counter++] = (array[i++] + array[i++] + array[i++]);\n                            }\n                        }\n                        break;\n                    case 4 /* RGBAlpha */:\n                        if (luminance) {\n                            while (i < maxi) {\n                                lumaValues[counter++] = (array[i++] * 0.212655 + array[i++] * 0.715158 + array[i++] * 0.072187) * (array[i++] / 255);\n                            }\n                        }\n                        else {\n                            while (i < maxi) {\n                                lumaValues[counter++] = (array[i++] + array[i++] + array[i++]) * (array[i++] / 255);\n                            }\n                        }\n                        break;\n                }\n            }\n            return lumaValues;\n        }\n        function _averageLuma(lumaValues) {\n            var sumLuma = 0.0;\n            for (var i = 0; i < lumaValues.length; i++) {\n                sumLuma += lumaValues[i];\n            }\n            return sumLuma / lumaValues.length;\n        }\n    })(Internals || (Internals = {}));\n})(ImageSSIM || (ImageSSIM = {}));\nmodule.exports = ImageSSIM;\n\n},{}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}